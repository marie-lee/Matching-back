openapi: 3.0.0
info:
  title: Matching Back API
  version: 1.0.0
servers:
  - url: http://218.232.137.30:20080/api/v1
tags:
  - name: member
    description: Operations about member
paths:
  /member/login:
    post:
      tags:
        - member
      summary: login
      description: login
      requestBody:
        description: login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginReq'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/loginRes200'
        '400':
          $ref: '#/components/responses/loginRes400'
        '401':
          $ref: '#/components/responses/loginRes401'
  /member/profile:
    post:
      tags:
        - member
      summary: 프로필, 포트폴리오 입력
      description: |
        프로필, 포트폴리오 입력
        여기에는 portfolio1 만 예시로 되어있지만 실제 사용시 프론트엔드에서
        portfolio2, portfolio3... 으로 동적 생성하여 요청 하시면 처리 됩니다.
        json 데이터는 application/json 탭에 예시를 참고하여 작성 후
        multipart/form-data 탭의 data 란에 입력 후 요청 바랍니다.
        portfolios 안에 포트폴리오 데이터들이 담기며 포트폴리오 데이터들안에 ID 필드로 파일의 필드 이름과 동일하게 작성해야됩니다. (ex. portfolio1의 파일들은 json데이터의 portfolio1과 연결)
        예시에서 벗어나거나 필드 이름이 틀릴 시 에러 발생합니다.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/profileUpload'
          application/json:
            schema:
              $ref: '#/components/schemas/profileUploadExample'

      responses:
        '200':
          $ref: '#/components/responses/profileUpload200'


components:
  schemas:
    loginReq:
      description: login request
      type: object
      properties:
        email:
          type: string
          description: 유저 이메일
          example: example@google.com
        password:
          type: string
          description: 유저 패스워드
          example: asdf1234
      required:
        - email
        - password
    profileUpload:
      description: 프로필, 포트폴리오 업로드
      type: object
      properties:
        profile:
          type: string
          format: binary
        portfolio1:
          type: string
          format: binary
        data:
          type: string
      required:
        - data
    profileUploadExample:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/profileUploadExample'
        portfolios:
          type: array
          items:
            $ref: '#/components/schemas/profileUploadExample'
      example: # 여기에 JSON 예시를 추가합니다.
        profile:
          PF_INTRO: 설명
          CAREERS:
            - CAREER_NM: 회사
              ENTERING_DT: "2021-01-01"
              QUIT_DT: "2022-12-31"
            - CAREER_NM: 회사2
              ENTERING_DT: "2023-01-01"
              QUIT_DT: "2024-01-31"
          STACKS:
            - ST_NM: JAVA
              LEVEL: LOW
            - ST_NM: JS
              LEVEL: LOW
          INTRST:
            - JAVA
            - REACT
          URL:
            - www.www.www
            - www.www.com
        portfolios:
          - ID: portfolio1
            PFOL_NM: 포트폴리오1
            INTRO: 설명
            PERIOD: "5"
            START_DT: "2021-01-01"
            END_DT: "2022-01-01"
            MEM_CNT: "5"
            CONTRIBUTION: "20"
            SERVICE_STTS: ACTIVE
            RESULT: 만족
            STACKS:
              - ST_NM: JAVA
              - ST_NM: STRING
            ROLE:
              - 기획
              - 백엔드
            URL:
              - URL: www.url.com
                RELEASE_YN: "1"
                OS: WINDOWS
              - URL: www.url2.com
                RELEASE_YN: "0"
                OS: MAC OS
            FILE:
              - FILENAME: 2.jpg
                MAIN_YN: "1"
              - FILENAME: 1.JPG
                MAIN_YN: "0"
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    loginRes200:
      description: 로그인 성공
      content:
        application/json:
          schema:
            description: login response
            type: object
            properties:
              accessToken:
                type: string
                description: access token
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVU0VSX1NOIjoxLCJpYXQiOjE3MTY2MzkxMjksImV4cCI6MTcxNjY0MDkyOX0.Q4tn2cP5qBM1OTIHohhxSSADtS_tgIQhdbJbibNot_U
              refreshToken:
                type: string
                description: refresh token
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVU0VSX1NOIjoxLCJpYXQiOjE3MTY2MzkxMjksImV4cCI6MTcxNzI0MzkyOX0.aVv_TxAd1GRAWd9i6MjS47vw1NZb0gC3cKO29Y9pUyc
              USER_NM:
                type: string
                description: 유저 이름
                example: 이름
    loginRes400:
      description: Invalid input
      content:
        text:
          example: error 메시지
    loginRes401:
      description: Validation exception
      content:
        text:
          example: '로그인 실패 : 유저 정보를 찾지 못했습니다.'
    profileUpload200:
      description: 프로필 업로드 성공
      content:
        text:
          example: 프로필, 포트폴리오 입력 완료

